go在1.5前如果不设置GOMAXPROCS是单核执行多个goruntine，通过内部算法逻辑上实现并行，其实还是串行。1.5后GOMAXPROCS默认为CPU核数数量，可以并发执行多个goruntine。

并发就是：两个队列，同时依次去访问一个资源。而并行：两个队列，分别依次访问两个资源。 
简单来说，并发，就像一个人（cpu）喂2个孩子（程序），轮换着每人喂一口，表面上两个孩子都在吃饭。并行，就是2个人喂2个孩子，两个孩子也同时在吃饭。

多个goruntine和main主goruntine执行没有先后顺序，子goruntine可能被执行也可能不会被执行，如果主goruntine执行完就结束不会等待子goruntine。
为了避免主goruntine执行完，而子goruntine没有执行完，可以通过无缓冲的信道channel来实现goruntine间的通信从而实现主goruntine堵塞等待子goruntine。
子goruntine遇到堵塞会挂起，不会影响主goruntine的执行。
关闭channel最好在生产者那里使用close关闭。
关闭后的channel可以取数据，但是不能放数据。而且，channel在执行了close()后并没有真的关闭，channel中的数据全部取走之后才会真正关闭。

var ch = make(chan int)
func foo() {
    ch <- 0  // 向ch中加数据，如果没有其他goroutine来取走这个数据，那么挂起foo, 直到main函数把0这个数据拿走
}
func main() {
    go foo()
    <- ch // 从ch取数据，如果ch中还没放数据，那就挂起main线，直到foo函数中放数据为止
}

死锁
 Go启动的所有goroutine里的非缓冲信道一定要一个线里存数据，一个线里取数据，要成对才行。
 channel最好不要写在主roguntine中
 一定要注意放入和取出的速率问题，不然即使使用有缓存的channel也会发生死锁
